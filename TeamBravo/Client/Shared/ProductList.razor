@inject IProductService ProductService
@*<ul class="list-unstyled">
        @foreach (var product in ProductService.Products)
        {
            <li class="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="/product/@product.Id">
                        <img class="media-img" src="@product.ImgUrl" alt="@product.Title" />
                    </a>
                </div>
                <div class="media-body">
                    <a href="/product/@product.Id">
                        <h4 class="mb-0">@product.Title</h4>
                    </a>
                    <p>@product.Description</p>
                    <h5 class="price">
                        @product.Price
                    </h5>
                </div>
            </li>
        }
    </ul>*@

<!--Featured Brands-->
<section class="featured-brands">
    <div class="container">
        <div class="featured-brands-text">
            <h1>FEATURED BRANDS</h1>
        </div>
        <div class="container flex">
            @foreach (var product in ProductService.Products)
            {
                <div class="card">
                    <a href="/product/@product.Id">
                        <img class="card-img" src="@product.ImgUrl" alt="@product.Title" />
                    </a>
                    <h1 class="card-name">@product.Title</h1>
                    <p class="card-price">@product.Price</p>
                </div>
            }
        </div>
    </div>
</section>

@code { protected override void OnInitialized()
            {
                ProductService.OnChange += StateHasChanged;
            }

            public void Dispose()
            {
                ProductService.OnChange -= StateHasChanged;
            } }
